from lexer import *
from AST import *

class Parser:
    """
    Parses tokens generated by the Lexer and builds the AST.
    """
    def __init__(self, lexer):
        self.lexer = lexer
        self.current_token = self.lexer.get_next_token()
        self.attr_value = None

    def eat(self, token_type):
        """Consumes the current token if it matches the expected type."""
        if self.current_token.type == token_type:
            self.current_token = self.lexer.get_next_token()
        else:
            raise Exception('Syntax error (parsing).')

    def factor(self):
        """Parses factors (numbers, attributes, parentheses, or regex)."""
        token = self.current_token
        if token.type == INTEGER:
            self.eat(INTEGER)
            return Num(token)
        elif token.type == ATTR:
            self.eat(ATTR)
            return Num(Token(INTEGER, self.attr_value))
        elif token.type == LPAREN:
            self.eat(LPAREN)
            node = self.expr()
            self.eat(RPAREN)
            return node
        elif token.type == REGEX:
            return self.regex()
        else:
            raise Exception('Unexpected token.')

    def regex(self):
        """Parses regex operations."""
        self.eat(REGEX)
        self.eat(LPAREN)
        attr = self.current_token
        self.eat(ATTR)
        self.eat(COMMA)
        pattern = self.current_token
        self.eat(STRING)
        self.eat(RPAREN)
        return Regex(attr, pattern)

    def term(self):
        """Parses multiplication and division operations."""
        node = self.factor()
        while self.current_token and self.current_token.type in (MUL, DIV):
            token = self.current_token
            self.eat(token.type)
            node = BinOp(left=node, op=token, right=self.factor())
        return node

    def expr(self):
        """Parses addition and subtraction operations."""
        node = self.term()
        while self.current_token and self.current_token.type in (PLUS, MINUS):
            token = self.current_token
            self.eat(token.type)
            node = BinOp(left=node, op=token, right=self.term())
        return node

    def parse(self):
        """Initiates the parsing process."""
        return self.expr()
